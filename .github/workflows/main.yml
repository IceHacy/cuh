name: CI

on:
  workflow_dispatch:
    inputs:
      chrome_rd_auth_code:
        description: 'Chrome Remote Desktop Auth Code'
        required: true

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Download Chrome Remote Desktop Host
      run: Invoke-WebRequest -Uri "https://dl.google.com/edgedl/chrome-remote-desktop/chromeremotedesktophost.msi" -OutFile "$env:TEMP\chromeremotedesktophost.msi"
      shell: pwsh

    - name: Install Chrome Remote Desktop Host
      run: |
        $logFile = "$env:TEMP\crd_install.log"
        $msiPath = "$env:TEMP\chromeremotedesktophost.msi"
        
        # We add /L*v to create a verbose log file
        $arguments = "/i `"$msiPath`" /quiet /norestart /L*v `"$logFile`""
        
        Start-Process msiexec.exe -ArgumentList $arguments -Wait
        
        # Check the exit code. If it's not 0, the installation failed.
        if ($LASTEXITCODE -ne 0) {
            Write-Host "##[error]MSI installer failed with exit code: $LASTEXITCODE"
            Write-Host "--- Displaying installation log from $logFile ---"
            Get-Content $logFile -ErrorAction SilentlyContinue
            exit $LASTEXITCODE
        }
        Write-Host "MSI installer completed successfully."
      shell: pwsh

    - name: Configure and Start Chrome Remote Desktop Host
      run: |
        $hostExe = "${Env:PROGRAMFILES(X86)}\Google\Chrome Remote Desktop\CurrentVersion\remoting_start_host.exe"
        
        # We still need this check, as a successful exit code doesn't guarantee the files are instantly available
        $timeout = 0
        while (-not (Test-Path $hostExe)) {
          if ($timeout -ge 20) {
            Write-Error "CRD host executable not found after successful installation."
            exit 1
          }
          Start-Sleep -Seconds 1
          $timeout++
        }
        
        $authCode = "${{ github.event.inputs.chrome_rd_auth_code }}"
        $pin = "123123"
        
        & $hostExe --code="$authCode" --redirect-url="https://remotedesktop.google.com/_/oauthredirect" --name="$Env:COMPUTERNAME" --pin="$pin"
        
        if ($LASTEXITCODE -ne 0) {
            exit $LASTEXITCODE
        }
      shell: pwsh

    - name: Create Firewall Rule
      run: |
        $crdHostPath = "${Env:PROGRAMFILES(X86)}\Google\Chrome Remote Desktop\CurrentVersion\remoting_host.exe"
        New-NetFirewallRule -DisplayName "Chrome Remote Desktop" -Direction Outbound -Program $crdHostPath -Action Allow
      shell: pwsh
      
    - name: Keep Runner Alive
      run: |
        Start-Service -Name remoting
        Start-Sleep -Seconds 21600
      shell: pwsh
